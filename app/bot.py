import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import requests
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = os.getenv("BACKEND_API_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://jarvis-production-aa5d.up.railway.app/process_message

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler()
async def handle_message(message: types.Message):
    user_text = message.text
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M")

    payload = {
        "text": user_text,
        "now": now_str
    }

    try:
        response = requests.post(API_URL, json=payload)
        data = response.json()

        # –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è json —Å –∫–ª—é—á–∞–º–∏ date/time/task ‚Äî –≤—Å—ë –æ–∫
        if "response" in data and "date" in data["response"]:
            await message.reply(f"üóì –ó–∞–¥–∞—á–∞:\n{data['response']}")
        else:
            await message.reply("‚ùå –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)